SystemVerilog Test Runner
==================================================
Target: parts\
Max combinations: 16
Parallel processing: 11 workers

Found 36 SystemVerilog file(s) to test

Running tests in parallel with 11 workers...

================================================================================
FILE: parts\adder_16bit.sv
================================================================================
Status: [PASS]
Module: adder_16bit
Inputs: ['inA', 'inB', 'inCarry']
Outputs: ['outSum', 'outCarry']
NAND Gates: 240
Execution Time: 0.397s
JSON Test File: parts\adder_16bit.json
Test Results: 8/8 passed (100.0%)
Warnings: Warning: Too many input combinations (8589934592). Limiting to first 16 combinations.

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed
  Test 5 passed
  Test 6 passed
  Test 7 passed
  Test 8 passed

Truth Table:
inA[15:0] inB[15:0] inCarry | outSum[15:0] outCarry
---------------------------------------------------
     0      0      0 |      0      0
     0      0      1 |      1      0
     0      1      0 |      1      0
     0      1      1 |      2      0
     0      2      0 |      2      0
     0      2      1 |      3      0
     0      3      0 |      3      0
     0      3      1 |      4      0
     0      4      0 |      4      0
     0      4      1 |      5      0
     0      5      0 |      5      0
     0      5      1 |      6      0
     0      6      0 |      6      0
     0      6      1 |      7      0
     0      7      0 |      7      0
     0      7      1 |      8      0

================================================================================
FILE: parts\adder_32bit.sv
================================================================================
Status: [PASS]
Module: adder_32bit
Inputs: ['inA', 'inB', 'inCarry']
Outputs: ['outSum', 'outCarry']
NAND Gates: 480
Execution Time: 0.630s
JSON Test File: parts\adder_32bit.json
Test Results: 8/8 passed (100.0%)
Warnings: Warning: Too many input combinations (36893488147419103232). Limiting to first 16 combinations.

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed
  Test 5 passed
  Test 6 passed
  Test 7 passed
  Test 8 passed

Truth Table:
inA[31:0] inB[31:0] inCarry | outSum[31:0] outCarry
---------------------------------------------------
     0      0      0 |      0      0
     0      0      1 |      1      0
     0      1      0 |      1      0
     0      1      1 |      2      0
     0      2      0 |      2      0
     0      2      1 |      3      0
     0      3      0 |      3      0
     0      3      1 |      4      0
     0      4      0 |      4      0
     0      4      1 |      5      0
     0      5      0 |      5      0
     0      5      1 |      6      0
     0      6      0 |      6      0
     0      6      1 |      7      0
     0      7      0 |      7      0
     0      7      1 |      8      0

================================================================================
FILE: parts\adder_4bit.sv
================================================================================
Status: [PASS]
Module: adder_4bit
Inputs: ['inA', 'inB', 'inCarry']
Outputs: ['outSum', 'outCarry']
NAND Gates: 60
Execution Time: 0.109s
JSON Test File: parts\adder_4bit.json
Test Results: 10/10 passed (100.0%)
Warnings: Warning: Too many input combinations (512). Limiting to first 16 combinations.

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed
  Test 5 passed
  Test 6 passed
  Test 7 passed
  Test 8 passed
  Test 9 passed
  Test 10 passed

Truth Table:
inA[3:0] inB[3:0] inCarry | outSum[3:0] outCarry
------------------------------------------------
     0      0      0 |      0      0
     0      0      1 |      1      0
     0      1      0 |      1      0
     0      1      1 |      2      0
     0      2      0 |      2      0
     0      2      1 |      3      0
     0      3      0 |      3      0
     0      3      1 |      4      0
     0      4      0 |      4      0
     0      4      1 |      5      0
     0      5      0 |      5      0
     0      5      1 |      6      0
     0      6      0 |      6      0
     0      6      1 |      7      0
     0      7      0 |      7      0
     0      7      1 |      8      0

================================================================================
FILE: parts\adder_64bit.sv
================================================================================
Status: [PASS]
Module: adder_64bit
Inputs: ['inA', 'inB', 'inCarry']
Outputs: ['outSum', 'outCarry']
NAND Gates: 960
Execution Time: 1.126s
JSON Test File: parts\adder_64bit.json
Test Results: 8/8 passed (100.0%)
Warnings: Warning: Too many input combinations (680564733841876926926749214863536422912). Limiting to first 16 combinations.

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed
  Test 5 passed
  Test 6 passed
  Test 7 passed
  Test 8 passed

Truth Table:
inA[63:0] inB[63:0] inCarry | outSum[63:0] outCarry
---------------------------------------------------
     0      0      0 |      0      0
     0      0      1 |      1      0
     0      1      0 |      1      0
     0      1      1 |      2      0
     0      2      0 |      2      0
     0      2      1 |      3      0
     0      3      0 |      3      0
     0      3      1 |      4      0
     0      4      0 |      4      0
     0      4      1 |      5      0
     0      5      0 |      5      0
     0      5      1 |      6      0
     0      6      0 |      6      0
     0      6      1 |      7      0
     0      7      0 |      7      0
     0      7      1 |      8      0

================================================================================
FILE: parts\adder_8bit.sv
================================================================================
Status: [PASS]
Module: adder_8bit
Inputs: ['inA', 'inB', 'inCarry']
Outputs: ['outSum', 'outCarry']
NAND Gates: 120
Execution Time: 0.192s
JSON Test File: parts\adder_8bit.json
Test Results: 10/10 passed (100.0%)
Warnings: Warning: Too many input combinations (131072). Limiting to first 16 combinations.

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed
  Test 5 passed
  Test 6 passed
  Test 7 passed
  Test 8 passed
  Test 9 passed
  Test 10 passed

Truth Table:
inA[7:0] inB[7:0] inCarry | outSum[7:0] outCarry
------------------------------------------------
     0      0      0 |      0      0
     0      0      1 |      1      0
     0      1      0 |      1      0
     0      1      1 |      2      0
     0      2      0 |      2      0
     0      2      1 |      3      0
     0      3      0 |      3      0
     0      3      1 |      4      0
     0      4      0 |      4      0
     0      4      1 |      5      0
     0      5      0 |      5      0
     0      5      1 |      6      0
     0      6      0 |      6      0
     0      6      1 |      7      0
     0      7      0 |      7      0
     0      7      1 |      8      0

================================================================================
FILE: parts\adder_cs_16bit.sv
================================================================================
Status: [PASS]
Module: adder_cs_16bit
Inputs: ['inA', 'inB', 'inCarry']
Outputs: ['outSum', 'outCarry']
NAND Gates: 732
Execution Time: 1.079s
JSON Test File: parts\adder_cs_16bit.json
Test Results: 12/12 passed (100.0%)
Warnings: Warning: Too many input combinations (8589934592). Limiting to first 16 combinations.

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed
  Test 5 passed
  Test 6 passed
  Test 7 passed
  Test 8 passed
  Test 9 passed
  Test 10 passed
  Test 11 passed
  Test 12 passed

Truth Table:
inA[15:0] inB[15:0] inCarry | outSum[15:0] outCarry
---------------------------------------------------
     0      0      0 |      0      0
     0      0      1 |      1      0
     0      1      0 |      1      0
     0      1      1 |      2      0
     0      2      0 |      2      0
     0      2      1 |      3      0
     0      3      0 |      3      0
     0      3      1 |      4      0
     0      4      0 |      4      0
     0      4      1 |      5      0
     0      5      0 |      5      0
     0      5      1 |      6      0
     0      6      0 |      6      0
     0      6      1 |      7      0
     0      7      0 |      7      0
     0      7      1 |      8      0

================================================================================
FILE: parts\adder_cs_32bit.sv
================================================================================
Status: [PASS]
Module: adder_cs_32bit
Inputs: ['inA', 'inB', 'inCarry']
Outputs: ['outSum', 'outCarry']
NAND Gates: 2332
Execution Time: 2.670s
JSON Test File: parts\adder_cs_32bit.json
Test Results: 12/12 passed (100.0%)
Warnings: Warning: Too many input combinations (36893488147419103232). Limiting to first 16 combinations.

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed
  Test 5 passed
  Test 6 passed
  Test 7 passed
  Test 8 passed
  Test 9 passed
  Test 10 passed
  Test 11 passed
  Test 12 passed

Truth Table:
inA[31:0] inB[31:0] inCarry | outSum[31:0] outCarry
---------------------------------------------------
     0      0      0 |      0      0
     0      0      1 |      1      0
     0      1      0 |      1      0
     0      1      1 |      2      0
     0      2      0 |      2      0
     0      2      1 |      3      0
     0      3      0 |      3      0
     0      3      1 |      4      0
     0      4      0 |      4      0
     0      4      1 |      5      0
     0      5      0 |      5      0
     0      5      1 |      6      0
     0      6      0 |      6      0
     0      6      1 |      7      0
     0      7      0 |      7      0
     0      7      1 |      8      0

================================================================================
FILE: parts\adder_cs_64bit.sv
================================================================================
Status: [PASS]
Module: adder_cs_64bit
Inputs: ['inA', 'inB', 'inCarry']
Outputs: ['outSum', 'outCarry']
NAND Gates: 7260
Execution Time: 6.363s
JSON Test File: parts\adder_cs_64bit.json
Test Results: 8/8 passed (100.0%)
Warnings: Warning: Too many input combinations (680564733841876926926749214863536422912). Limiting to first 16 combinations.

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed
  Test 5 passed
  Test 6 passed
  Test 7 passed
  Test 8 passed

Truth Table:
inA[63:0] inB[63:0] inCarry | outSum[63:0] outCarry
---------------------------------------------------
     0      0      0 |      0      0
     0      0      1 |      1      0
     0      1      0 |      1      0
     0      1      1 |      2      0
     0      2      0 |      2      0
     0      2      1 |      3      0
     0      3      0 |      3      0
     0      3      1 |      4      0
     0      4      0 |      4      0
     0      4      1 |      5      0
     0      5      0 |      5      0
     0      5      1 |      6      0
     0      6      0 |      6      0
     0      6      1 |      7      0
     0      7      0 |      7      0
     0      7      1 |      8      0

================================================================================
FILE: parts\adder_cs_8bit.sv
================================================================================
Status: [PASS]
Module: adder_cs_8bit
Inputs: ['inA', 'inB', 'inCarry']
Outputs: ['outSum', 'outCarry']
NAND Gates: 220
Execution Time: 0.375s
JSON Test File: parts\adder_cs_8bit.json
Test Results: 10/10 passed (100.0%)
Warnings: Warning: Too many input combinations (131072). Limiting to first 16 combinations.

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed
  Test 5 passed
  Test 6 passed
  Test 7 passed
  Test 8 passed
  Test 9 passed
  Test 10 passed

Truth Table:
inA[7:0] inB[7:0] inCarry | outSum[7:0] outCarry
------------------------------------------------
     0      0      0 |      0      0
     0      0      1 |      1      0
     0      1      0 |      1      0
     0      1      1 |      2      0
     0      2      0 |      2      0
     0      2      1 |      3      0
     0      3      0 |      3      0
     0      3      1 |      4      0
     0      4      0 |      4      0
     0      4      1 |      5      0
     0      5      0 |      5      0
     0      5      1 |      6      0
     0      6      0 |      6      0
     0      6      1 |      7      0
     0      7      0 |      7      0
     0      7      1 |      8      0

================================================================================
FILE: parts\and_gate.sv
================================================================================
Status: [PASS]
Module: and_gate
Inputs: ['inA', 'inB']
Outputs: ['outY']
NAND Gates: 2
Execution Time: 0.004s
JSON Test File: parts\and_gate.json
Test Results: 4/4 passed (100.0%)

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed

Truth Table:
   inA    inB |   outY
----------------------
     0      0 |      0
     0      1 |      0
     1      0 |      0
     1      1 |      1

================================================================================
FILE: parts\and_gate_8bit.sv
================================================================================
Status: [PASS]
Module: and_gate_8bit
Inputs: ['inA', 'inB']
Outputs: ['outY']
NAND Gates: 16
Execution Time: 0.034s
JSON Test File: parts\and_gate_8bit.json
Test Results: 12/12 passed (100.0%)
Warnings: Warning: Too many input combinations (65536). Limiting to first 16 combinations.

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed
  Test 5 passed
  Test 6 passed
  Test 7 passed
  Test 8 passed
  Test 9 passed
  Test 10 passed
  Test 11 passed
  Test 12 passed

Truth Table:
inA[7:0] inB[7:0] | outY[7:0]
-----------------------------
     0      0 |      0
     0      1 |      0
     0      2 |      0
     0      3 |      0
     0      4 |      0
     0      5 |      0
     0      6 |      0
     0      7 |      0
     0      8 |      0
     0      9 |      0
     0     10 |      0
     0     11 |      0
     0     12 |      0
     0     13 |      0
     0     14 |      0
     0     15 |      0

================================================================================
FILE: parts\counter8.sv
================================================================================
Status: [PASS]
Module: counter8
Inputs: ['clk', 'reset', 'enable']
Outputs: ['count']
NAND Gates: 0
Execution Time: 0.003s
JSON Test File: parts\counter8.json
Test Results: 3/3 passed (100.0%)
Warnings: Truth table skipped for sequential logic module

Test Execution:
  Reset functionality passed
  Basic increment passed
  Complete counter sequence passed

Truth Table: 0 combinations generated

================================================================================
FILE: parts\full_adder.sv
================================================================================
Status: [PASS]
Module: full_adder
Inputs: ['inA', 'inB', 'inCarry']
Outputs: ['outSum', 'outCarry']
NAND Gates: 15
Execution Time: 0.019s
JSON Test File: parts\full_adder.json
Test Results: 8/8 passed (100.0%)

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed
  Test 5 passed
  Test 6 passed
  Test 7 passed
  Test 8 passed

Truth Table:
   inA    inB inCarry | outSum outCarry
---------------------------------------
     0      0      0 |      0      0
     0      0      1 |      1      0
     0      1      0 |      1      0
     0      1      1 |      0      1
     1      0      0 |      1      0
     1      0      1 |      0      1
     1      1      0 |      0      1
     1      1      1 |      1      1

================================================================================
FILE: parts\half_adder.sv
================================================================================
Status: [PASS]
Module: half_adder
Inputs: ['inA', 'inB']
Outputs: ['outSum', 'outCarry']
NAND Gates: 6
Execution Time: 0.005s
JSON Test File: parts\half_adder.json
Test Results: 4/4 passed (100.0%)

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed

Truth Table:
   inA    inB | outSum outCarry
-------------------------------
     0      0 |      0      0
     0      1 |      1      0
     1      0 |      1      0
     1      1 |      0      1

================================================================================
FILE: parts\mux_2to1_16bit.sv
================================================================================
Status: [PASS]
Module: mux_2to1_16bit
Inputs: ['in0', 'in1', 'sel']
Outputs: ['out']
NAND Gates: 128
Execution Time: 0.251s
JSON Test File: parts\mux_2to1_16bit.json
Test Results: 12/12 passed (100.0%)
Warnings: Warning: Too many input combinations (8589934592). Limiting to first 16 combinations.

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed
  Test 5 passed
  Test 6 passed
  Test 7 passed
  Test 8 passed
  Test 9 passed
  Test 10 passed
  Test 11 passed
  Test 12 passed

Truth Table:
in0[15:0] in1[15:0]    sel | out[15:0]
--------------------------------------
     0      0      0 |      0
     0      0      1 |      0
     0      1      0 |      0
     0      1      1 |      1
     0      2      0 |      0
     0      2      1 |      2
     0      3      0 |      0
     0      3      1 |      3
     0      4      0 |      0
     0      4      1 |      4
     0      5      0 |      0
     0      5      1 |      5
     0      6      0 |      0
     0      6      1 |      6
     0      7      0 |      0
     0      7      1 |      7

================================================================================
FILE: parts\mux_2to1_1bit.sv
================================================================================
Status: [PASS]
Module: mux_2to1_1bit
Inputs: ['in0', 'in1', 'sel']
Outputs: ['out']
NAND Gates: 8
Execution Time: 0.010s
JSON Test File: parts\mux_2to1_1bit.json
Test Results: 8/8 passed (100.0%)

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed
  Test 5 passed
  Test 6 passed
  Test 7 passed
  Test 8 passed

Truth Table:
   in0    in1    sel |    out
-----------------------------
     0      0      0 |      0
     0      0      1 |      0
     0      1      0 |      0
     0      1      1 |      1
     1      0      0 |      1
     1      0      1 |      0
     1      1      0 |      1
     1      1      1 |      1

================================================================================
FILE: parts\mux_2to1_32bit.sv
================================================================================
Status: [PASS]
Module: mux_2to1_32bit
Inputs: ['in0', 'in1', 'sel']
Outputs: ['out']
NAND Gates: 256
Execution Time: 0.451s
JSON Test File: parts\mux_2to1_32bit.json
Test Results: 12/12 passed (100.0%)
Warnings: Warning: Too many input combinations (36893488147419103232). Limiting to first 16 combinations.

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed
  Test 5 passed
  Test 6 passed
  Test 7 passed
  Test 8 passed
  Test 9 passed
  Test 10 passed
  Test 11 passed
  Test 12 passed

Truth Table:
in0[31:0] in1[31:0]    sel | out[31:0]
--------------------------------------
     0      0      0 |      0
     0      0      1 |      0
     0      1      0 |      0
     0      1      1 |      1
     0      2      0 |      0
     0      2      1 |      2
     0      3      0 |      0
     0      3      1 |      3
     0      4      0 |      0
     0      4      1 |      4
     0      5      0 |      0
     0      5      1 |      5
     0      6      0 |      0
     0      6      1 |      6
     0      7      0 |      0
     0      7      1 |      7

================================================================================
FILE: parts\mux_2to1_4bit.sv
================================================================================
Status: [PASS]
Module: mux_2to1_4bit
Inputs: ['in0', 'in1', 'sel']
Outputs: ['out']
NAND Gates: 32
Execution Time: 0.054s
JSON Test File: parts\mux_2to1_4bit.json
Test Results: 8/8 passed (100.0%)
Warnings: Warning: Too many input combinations (512). Limiting to first 16 combinations.

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed
  Test 5 passed
  Test 6 passed
  Test 7 passed
  Test 8 passed

Truth Table:
in0[3:0] in1[3:0]    sel | out[3:0]
-----------------------------------
     0      0      0 |      0
     0      0      1 |      0
     0      1      0 |      0
     0      1      1 |      1
     0      2      0 |      0
     0      2      1 |      2
     0      3      0 |      0
     0      3      1 |      3
     0      4      0 |      0
     0      4      1 |      4
     0      5      0 |      0
     0      5      1 |      5
     0      6      0 |      0
     0      6      1 |      6
     0      7      0 |      0
     0      7      1 |      7

================================================================================
FILE: parts\mux_2to1_8bit.sv
================================================================================
Status: [PASS]
Module: mux_2to1_8bit
Inputs: ['in0', 'in1', 'sel']
Outputs: ['out']
NAND Gates: 64
Execution Time: 0.129s
JSON Test File: parts\mux_2to1_8bit.json
Test Results: 12/12 passed (100.0%)
Warnings: Warning: Too many input combinations (131072). Limiting to first 16 combinations.

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed
  Test 5 passed
  Test 6 passed
  Test 7 passed
  Test 8 passed
  Test 9 passed
  Test 10 passed
  Test 11 passed
  Test 12 passed

Truth Table:
in0[7:0] in1[7:0]    sel | out[7:0]
-----------------------------------
     0      0      0 |      0
     0      0      1 |      0
     0      1      0 |      0
     0      1      1 |      1
     0      2      0 |      0
     0      2      1 |      2
     0      3      0 |      0
     0      3      1 |      3
     0      4      0 |      0
     0      4      1 |      4
     0      5      0 |      0
     0      5      1 |      5
     0      6      0 |      0
     0      6      1 |      6
     0      7      0 |      0
     0      7      1 |      7

================================================================================
FILE: parts\nand_gate.sv
================================================================================
Status: [PASS]
Module: nand_gate
Inputs: ['inA', 'inB']
Outputs: ['outY']
NAND Gates: 0
Execution Time: 0.001s
JSON Test File: parts\nand_gate.json
Test Results: 4/4 passed (100.0%)

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed

Truth Table:
   inA    inB |   outY
----------------------
     0      0 |      1
     0      1 |      1
     1      0 |      1
     1      1 |      0

================================================================================
FILE: parts\nand_gate_8bit.sv
================================================================================
Status: [PASS]
Module: nand_gate_8bit
Inputs: ['inA', 'inB']
Outputs: ['outY']
NAND Gates: 8
Execution Time: 0.015s
JSON Test File: parts\nand_gate_8bit.json
Test Results: 12/12 passed (100.0%)
Warnings: Warning: Too many input combinations (65536). Limiting to first 16 combinations.

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed
  Test 5 passed
  Test 6 passed
  Test 7 passed
  Test 8 passed
  Test 9 passed
  Test 10 passed
  Test 11 passed
  Test 12 passed

Truth Table:
inA[7:0] inB[7:0] | outY[7:0]
-----------------------------
     0      0 |    255
     0      1 |    255
     0      2 |    255
     0      3 |    255
     0      4 |    255
     0      5 |    255
     0      6 |    255
     0      7 |    255
     0      8 |    255
     0      9 |    255
     0     10 |    255
     0     11 |    255
     0     12 |    255
     0     13 |    255
     0     14 |    255
     0     15 |    255

================================================================================
FILE: parts\nor_gate.sv
================================================================================
Status: [PASS]
Module: nor_gate
Inputs: ['inA', 'inB']
Outputs: ['outY']
NAND Gates: 4
Execution Time: 0.003s
JSON Test File: parts\nor_gate.json
Test Results: 4/4 passed (100.0%)

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed

Truth Table:
   inA    inB |   outY
----------------------
     0      0 |      1
     0      1 |      0
     1      0 |      0
     1      1 |      0

================================================================================
FILE: parts\nor_gate_8bit.sv
================================================================================
Status: [PASS]
Module: nor_gate_8bit
Inputs: ['inA', 'inB']
Outputs: ['outY']
NAND Gates: 32
Execution Time: 0.070s
JSON Test File: parts\nor_gate_8bit.json
Test Results: 12/12 passed (100.0%)
Warnings: Warning: Too many input combinations (65536). Limiting to first 16 combinations.

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed
  Test 5 passed
  Test 6 passed
  Test 7 passed
  Test 8 passed
  Test 9 passed
  Test 10 passed
  Test 11 passed
  Test 12 passed

Truth Table:
inA[7:0] inB[7:0] | outY[7:0]
-----------------------------
     0      0 |    255
     0      1 |    254
     0      2 |    253
     0      3 |    252
     0      4 |    251
     0      5 |    250
     0      6 |    249
     0      7 |    248
     0      8 |    247
     0      9 |    246
     0     10 |    245
     0     11 |    244
     0     12 |    243
     0     13 |    242
     0     14 |    241
     0     15 |    240

================================================================================
FILE: parts\not_gate.sv
================================================================================
Status: [PASS]
Module: not_gate
Inputs: ['inA']
Outputs: ['outY']
NAND Gates: 1
Execution Time: 0.002s
JSON Test File: parts\not_gate.json
Test Results: 2/2 passed (100.0%)

Test Execution:
  Test 1 passed
  Test 2 passed

Truth Table:
   inA |   outY
---------------
     0 |      1
     1 |      0

================================================================================
FILE: parts\not_gate_8bit.sv
================================================================================
Status: [PASS]
Module: not_gate_8bit
Inputs: ['inA']
Outputs: ['outY']
NAND Gates: 8
Execution Time: 0.015s
JSON Test File: parts\not_gate_8bit.json
Test Results: 8/8 passed (100.0%)
Warnings: Warning: Too many input combinations (256). Limiting to first 16 combinations.

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed
  Test 5 passed
  Test 6 passed
  Test 7 passed
  Test 8 passed

Truth Table:
inA[7:0] | outY[7:0]
--------------------
     0 |    255
     1 |    254
     2 |    253
     3 |    252
     4 |    251
     5 |    250
     6 |    249
     7 |    248
     8 |    247
     9 |    246
    10 |    245
    11 |    244
    12 |    243
    13 |    242
    14 |    241
    15 |    240

================================================================================
FILE: parts\or_gate.sv
================================================================================
Status: [PASS]
Module: or_gate
Inputs: ['inA', 'inB']
Outputs: ['outY']
NAND Gates: 3
Execution Time: 0.003s
JSON Test File: parts\or_gate.json
Test Results: 4/4 passed (100.0%)

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed

Truth Table:
   inA    inB |   outY
----------------------
     0      0 |      0
     0      1 |      1
     1      0 |      1
     1      1 |      1

================================================================================
FILE: parts\or_gate_8bit.sv
================================================================================
Status: [PASS]
Module: or_gate_8bit
Inputs: ['inA', 'inB']
Outputs: ['outY']
NAND Gates: 24
Execution Time: 0.048s
JSON Test File: parts\or_gate_8bit.json
Test Results: 12/12 passed (100.0%)
Warnings: Warning: Too many input combinations (65536). Limiting to first 16 combinations.

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed
  Test 5 passed
  Test 6 passed
  Test 7 passed
  Test 8 passed
  Test 9 passed
  Test 10 passed
  Test 11 passed
  Test 12 passed

Truth Table:
inA[7:0] inB[7:0] | outY[7:0]
-----------------------------
     0      0 |      0
     0      1 |      1
     0      2 |      2
     0      3 |      3
     0      4 |      4
     0      5 |      5
     0      6 |      6
     0      7 |      7
     0      8 |      8
     0      9 |      9
     0     10 |     10
     0     11 |     11
     0     12 |     12
     0     13 |     13
     0     14 |     14
     0     15 |     15

================================================================================
FILE: parts\register_16bit.sv
================================================================================
Status: [PASS]
Module: register_16bit
Inputs: ['clk', 'enable', 'data']
Outputs: ['q']
NAND Gates: 0
Execution Time: 0.001s
JSON Test File: parts\register_16bit.json
Test Results: 10/10 passed (100.0%)
Warnings: Truth table skipped for sequential logic module

Test Execution:
  Cycle 0 passed - Initialize register with enable=1, data=0x0000
  Cycle 1 passed - Store 0xAAAA (binary 1010101010101010)
  Cycle 2 passed - Try to store 0x5555 but enable is low - should hold 0xAAAA
  Cycle 3 passed - Enable high - store 0x5555
  Cycle 4 passed - Store 0xFFFF (all ones)
  Cycle 5 passed - Store 0x0000 (all zeros)
  Cycle 6 passed - Store 0x1234 (test pattern)
  Cycle 7 passed - Store 0xABCD (another test pattern)
  Cycle 8 passed - Hold test - enable low, data changes but output should hold
  Cycle 9 passed - Enable and store new value 0x8000 (MSB set)

Truth Table: 0 combinations generated

================================================================================
FILE: parts\register_1bit.sv
================================================================================
Status: [PASS]
Module: register_1bit
Inputs: ['clk', 'enable', 'data']
Outputs: ['q']
NAND Gates: 0
Execution Time: 0.001s
JSON Test File: parts\register_1bit.json
Test Results: 6/6 passed (100.0%)
Warnings: Truth table skipped for sequential logic module

Test Execution:
  Cycle 0 passed - Initialize register with 0
  Cycle 1 passed - Store 1 in register
  Cycle 2 passed - Hold value when enable is low
  Cycle 3 passed - Continue holding value
  Cycle 4 passed - Update to 0 when enable goes high
  Cycle 5 passed - Update to 1 immediately

Truth Table: 0 combinations generated

================================================================================
FILE: parts\register_32bit.sv
================================================================================
Status: [PASS]
Module: register_32bit
Inputs: ['clk', 'enable', 'data']
Outputs: ['q']
NAND Gates: 0
Execution Time: 0.001s
JSON Test File: parts\register_32bit.json
Test Results: 12/12 passed (100.0%)
Warnings: Truth table skipped for sequential logic module

Test Execution:
  Cycle 0 passed - Initialize register with enable=1, data=0x00000000
  Cycle 1 passed - Store 0xAAAAAAAA (alternating bits)
  Cycle 2 passed - Try to store 0x55555555 but enable is low - should hold 0xAAAAAAAA
  Cycle 3 passed - Enable high - store 0x55555555
  Cycle 4 passed - Store 0xFFFFFFFF (all ones)
  Cycle 5 passed - Store 0x00000000 (all zeros)
  Cycle 6 passed - Store 0x12345678 (test pattern)
  Cycle 7 passed - Store 0xABCDEF01 (another test pattern)
  Cycle 8 passed - Hold test - enable low, data changes but output should hold
  Cycle 9 passed - Enable and store new value 0x80000000 (MSB set)
  Cycle 10 passed - Store 0x7FFFFFFF (MSB clear, all other bits set)
  Cycle 11 passed - Final hold test - enable disabled

Truth Table: 0 combinations generated

================================================================================
FILE: parts\register_64bit.sv
================================================================================
Status: [PASS]
Module: register_64bit
Inputs: ['clk', 'enable', 'data']
Outputs: ['q']
NAND Gates: 0
Execution Time: 0.001s
JSON Test File: parts\register_64bit.json
Test Results: 13/13 passed (100.0%)
Warnings: Truth table skipped for sequential logic module

Test Execution:
  Cycle 0 passed - Initialize register with enable=1, data=0x0000000000000000
  Cycle 1 passed - Store 0xAAAAAAAAAAAAAAAA (alternating bits)
  Cycle 2 passed - Try to store 0x5555555555555555 but enable is low - should hold 0xAAAAAAAAAAAAAAAA
  Cycle 3 passed - Enable high - store 0x5555555555555555
  Cycle 4 passed - Store 0xFFFFFFFFFFFFFFFF (all ones)
  Cycle 5 passed - Store 0x0000000000000000 (all zeros)
  Cycle 6 passed - Store 0x123456789ABCDEF0 (test pattern)
  Cycle 7 passed - Store 0xFEDCBA9876543210 (reverse test pattern)
  Cycle 8 passed - Hold test - enable low, data changes but output should hold
  Cycle 9 passed - Enable and store new value 0x8000000000000000 (MSB set)
  Cycle 10 passed - Store 0x7FFFFFFFFFFFFFFF (MSB clear, all other bits set)
  Cycle 11 passed - Store boundary value 0x0123456789ABCDEF
  Cycle 12 passed - Final hold test - enable disabled

Truth Table: 0 combinations generated

================================================================================
FILE: parts\register_8bit.sv
================================================================================
Status: [PASS]
Module: register_8bit
Inputs: ['clk', 'enable', 'data']
Outputs: ['q']
NAND Gates: 0
Execution Time: 0.001s
JSON Test File: parts\register_8bit.json
Test Results: 10/10 passed (100.0%)
Warnings: Truth table skipped for sequential logic module

Test Execution:
  Cycle 0 passed - Initialize register with enable=1, data=0x00
  Cycle 1 passed - Store 0xAA (binary 10101010)
  Cycle 2 passed - Try to store 0x55 but enable is low - should hold 0xAA
  Cycle 3 passed - Enable high - store 0x55
  Cycle 4 passed - Store 0xFF (all ones)
  Cycle 5 passed - Store 0x00 (all zeros)
  Cycle 6 passed - Store 0x3C (binary 00111100)
  Cycle 7 passed - Hold test - enable low, data changes but output should hold
  Cycle 8 passed - Another hold test - still disabled
  Cycle 9 passed - Enable and store new value 0x80

Truth Table: 0 combinations generated

================================================================================
FILE: parts\xnor_gate.sv
================================================================================
Status: [PASS]
Module: xnor_gate
Inputs: ['inA', 'inB']
Outputs: ['outY']
NAND Gates: 5
Execution Time: 0.004s
JSON Test File: parts\xnor_gate.json
Test Results: 4/4 passed (100.0%)

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed

Truth Table:
   inA    inB |   outY
----------------------
     0      0 |      1
     0      1 |      0
     1      0 |      0
     1      1 |      1

================================================================================
FILE: parts\xnor_gate_8bit.sv
================================================================================
Status: [PASS]
Module: xnor_gate_8bit
Inputs: ['inA', 'inB']
Outputs: ['outY']
NAND Gates: 40
Execution Time: 0.076s
JSON Test File: parts\xnor_gate_8bit.json
Test Results: 12/12 passed (100.0%)
Warnings: Warning: Too many input combinations (65536). Limiting to first 16 combinations.

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed
  Test 5 passed
  Test 6 passed
  Test 7 passed
  Test 8 passed
  Test 9 passed
  Test 10 passed
  Test 11 passed
  Test 12 passed

Truth Table:
inA[7:0] inB[7:0] | outY[7:0]
-----------------------------
     0      0 |    255
     0      1 |    254
     0      2 |    253
     0      3 |    252
     0      4 |    251
     0      5 |    250
     0      6 |    249
     0      7 |    248
     0      8 |    247
     0      9 |    246
     0     10 |    245
     0     11 |    244
     0     12 |    243
     0     13 |    242
     0     14 |    241
     0     15 |    240

================================================================================
FILE: parts\xor_gate.sv
================================================================================
Status: [PASS]
Module: xor_gate
Inputs: ['inA', 'inB']
Outputs: ['outY']
NAND Gates: 4
Execution Time: 0.003s
JSON Test File: parts\xor_gate.json
Test Results: 4/4 passed (100.0%)

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed

Truth Table:
   inA    inB |   outY
----------------------
     0      0 |      0
     0      1 |      1
     1      0 |      1
     1      1 |      0

================================================================================
FILE: parts\xor_gate_8bit.sv
================================================================================
Status: [PASS]
Module: xor_gate_8bit
Inputs: ['inA', 'inB']
Outputs: ['outY']
NAND Gates: 32
Execution Time: 0.052s
JSON Test File: parts\xor_gate_8bit.json
Test Results: 12/12 passed (100.0%)
Warnings: Warning: Too many input combinations (65536). Limiting to first 16 combinations.

Test Execution:
  Test 1 passed
  Test 2 passed
  Test 3 passed
  Test 4 passed
  Test 5 passed
  Test 6 passed
  Test 7 passed
  Test 8 passed
  Test 9 passed
  Test 10 passed
  Test 11 passed
  Test 12 passed

Truth Table:
inA[7:0] inB[7:0] | outY[7:0]
-----------------------------
     0      0 |      0
     0      1 |      1
     0      2 |      2
     0      3 |      3
     0      4 |      4
     0      5 |      5
     0      6 |      6
     0      7 |      7
     0      8 |      8
     0      9 |      9
     0     10 |     10
     0     11 |     11
     0     12 |     12
     0     13 |     13
     0     14 |     14
     0     15 |     15


============================================================
SUMMARY REPORT
============================================================
Files Tested:           36
Overall Success:        36/36 (100.0%)
Parse Failures:         0
Truth Table Failures:   0
Files with JSON Tests:  36
Test Case Failures:     0
Total Test Cases:       310
Passed Test Cases:      310/310 (100.0%)
Total Execution Time:   14.198s
Average Time per File:  0.394s
Total NAND Gates:       13092
Average NAND per File:  363.7
============================================================

Total runtime: 6.552s

All tests passed! Exiting with code 0
