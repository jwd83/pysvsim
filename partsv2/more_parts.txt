// ===========================================================
// 8-Bit Logic Gates Built from 1-Bit Primitives
// ===========================================================
// Each gate is composed of 8 copies of the corresponding
// 1-bit gate module (which themselves are built from NANDs).
// ===========================================================

// ------------------- 8-Bit NOT Gate -------------------
module not_gate_8bit (
    input  logic [7:0] inA,
    output logic [7:0] outY
);
    not_gate u_not0 (.inA(inA[0]), .outY(outY[0]));
    not_gate u_not1 (.inA(inA[1]), .outY(outY[1]));
    not_gate u_not2 (.inA(inA[2]), .outY(outY[2]));
    not_gate u_not3 (.inA(inA[3]), .outY(outY[3]));
    not_gate u_not4 (.inA(inA[4]), .outY(outY[4]));
    not_gate u_not5 (.inA(inA[5]), .outY(outY[5]));
    not_gate u_not6 (.inA(inA[6]), .outY(outY[6]));
    not_gate u_not7 (.inA(inA[7]), .outY(outY[7]));
endmodule

// ------------------- 8-Bit AND Gate -------------------
module and_gate_8bit (
    input  logic [7:0] inA,
    input  logic [7:0] inB,
    output logic [7:0] outY
);
    and_gate u_and0 (.inA(inA[0]), .inB(inB[0]), .outY(outY[0]));
    and_gate u_and1 (.inA(inA[1]), .inB(inB[1]), .outY(outY[1]));
    and_gate u_and2 (.inA(inA[2]), .inB(inB[2]), .outY(outY[2]));
    and_gate u_and3 (.inA(inA[3]), .inB(inB[3]), .outY(outY[3]));
    and_gate u_and4 (.inA(inA[4]), .inB(inB[4]), .outY(outY[4]));
    and_gate u_and5 (.inA(inA[5]), .inB(inB[5]), .outY(outY[5]));
    and_gate u_and6 (.inA(inA[6]), .inB(inB[6]), .outY(outY[6]));
    and_gate u_and7 (.inA(inA[7]), .inB(inB[7]), .outY(outY[7]));
endmodule

// ------------------- 8-Bit OR Gate -------------------
module or_gate_8bit (
    input  logic [7:0] inA,
    input  logic [7:0] inB,
    output logic [7:0] outY
);
    or_gate u_or0 (.inA(inA[0]), .inB(inB[0]), .outY(outY[0]));
    or_gate u_or1 (.inA(inA[1]), .inB(inB[1]), .outY(outY[1]));
    or_gate u_or2 (.inA(inA[2]), .inB(inB[2]), .outY(outY[2]));
    or_gate u_or3 (.inA(inA[3]), .inB(inB[3]), .outY(outY[3]));
    or_gate u_or4 (.inA(inA[4]), .inB(inB[4]), .outY(outY[4]));
    or_gate u_or5 (.inA(inA[5]), .inB(inB[5]), .outY(outY[5]));
    or_gate u_or6 (.inA(inA[6]), .inB(inB[6]), .outY(outY[6]));
    or_gate u_or7 (.inA(inA[7]), .inB(inB[7]), .outY(outY[7]));
endmodule

// ------------------- 8-Bit NAND Gate -------------------
module nand_gate_8bit (
    input  logic [7:0] inA,
    input  logic [7:0] inB,
    output logic [7:0] outY
);
    nand_gate u_nand0 (.inA(inA[0]), .inB(inB[0]), .outY(outY[0]));
    nand_gate u_nand1 (.inA(inA[1]), .inB(inB[1]), .outY(outY[1]));
    nand_gate u_nand2 (.inA(inA[2]), .inB(inB[2]), .outY(outY[2]));
    nand_gate u_nand3 (.inA(inA[3]), .inB(inB[3]), .outY(outY[3]));
    nand_gate u_nand4 (.inA(inA[4]), .inB(inB[4]), .outY(outY[4]));
    nand_gate u_nand5 (.inA(inA[5]), .inB(inB[5]), .outY(outY[5]));
    nand_gate u_nand6 (.inA(inA[6]), .inB(inB[6]), .outY(outY[6]));
    nand_gate u_nand7 (.inA(inA[7]), .inB(inB[7]), .outY(outY[7]));
endmodule

// ------------------- 8-Bit NOR Gate -------------------
module nor_gate_8bit (
    input  logic [7:0] inA,
    input  logic [7:0] inB,
    output logic [7:0] outY
);
    nor_gate u_nor0 (.inA(inA[0]), .inB(inB[0]), .outY(outY[0]));
    nor_gate u_nor1 (.inA(inA[1]), .inB(inB[1]), .outY(outY[1]));
    nor_gate u_nor2 (.inA(inA[2]), .inB(inB[2]), .outY(outY[2]));
    nor_gate u_nor3 (.inA(inA[3]), .inB(inB[3]), .outY(outY[3]));
    nor_gate u_nor4 (.inA(inA[4]), .inB(inB[4]), .outY(outY[4]));
    nor_gate u_nor5 (.inA(inA[5]), .inB(inB[5]), .outY(outY[5]));
    nor_gate u_nor6 (.inA(inA[6]), .inB(inB[6]), .outY(outY[6]));
    nor_gate u_nor7 (.inA(inA[7]), .inB(inB[7]), .outY(outY[7]));
endmodule

// ------------------- 8-Bit XOR Gate -------------------
module xor_gate_8bit (
    input  logic [7:0] inA,
    input  logic [7:0] inB,
    output logic [7:0] outY
);
    xor_gate u_xor0 (.inA(inA[0]), .inB(inB[0]), .outY(outY[0]));
    xor_gate u_xor1 (.inA(inA[1]), .inB(inB[1]), .outY(outY[1]));
    xor_gate u_xor2 (.inA(inA[2]), .inB(inB[2]), .outY(outY[2]));
    xor_gate u_xor3 (.inA(inA[3]), .inB(inB[3]), .outY(outY[3]));
    xor_gate u_xor4 (.inA(inA[4]), .inB(inB[4]), .outY(outY[4]));
    xor_gate u_xor5 (.inA(inA[5]), .inB(inB[5]), .outY(outY[5]));
    xor_gate u_xor6 (.inA(inA[6]), .inB(inB[6]), .outY(outY[6]));
    xor_gate u_xor7 (.inA(inA[7]), .inB(inB[7]), .outY(outY[7]));
endmodule

// ------------------- 8-Bit XNOR Gate -------------------
module xnor_gate_8bit (
    input  logic [7:0] inA,
    input  logic [7:0] inB,
    output logic [7:0] outY
);
    xnor_gate u_xnor0 (.inA(inA[0]), .inB(inB[0]), .outY(outY[0]));
    xnor_gate u_xnor1 (.inA(inA[1]), .inB(inB[1]), .outY(outY[1]));
    xnor_gate u_xnor2 (.inA(inA[2]), .inB(inB[2]), .outY(outY[2]));
    xnor_gate u_xnor3 (.inA(inA[3]), .inB(inB[3]), .outY(outY[3]));
    xnor_gate u_xnor4 (.inA(inA[4]), .inB(inB[4]), .outY(outY[4]));
    xnor_gate u_xnor5 (.inA(inA[5]), .inB(inB[5]), .outY(outY[5]));
    xnor_gate u_xnor6 (.inA(inA[6]), .inB(inB[6]), .outY(outY[6]));
    xnor_gate u_xnor7 (.inA(inA[7]), .inB(inB[7]), .outY(outY[7]));
endmodule
